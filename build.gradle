buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "at.bxm.gradleplugins:gradle-svntools-plugin:2.2"
        classpath "org.tmatesoft.svnkit:svnkit:1.10.1"
    }
}

plugins {
    id 'base'
    id 'distribution'
    id 'maven-publish'
    id "nebula.ospackage" version "8.4.1"
}

version = '0.2.2'

task cleanDeps {
    if (gradle.startParameter.taskNames.contains("clean") && !project.gradle.startParameter.projectProperties.containsKey("moduleDep")) {
        println "Deleting temporary dependency modules"
        File depsCheckFile = rootProject.file("deps/dependency.txt")
        if (depsCheckFile.exists()) {
            File depsDir = rootProject.file("deps")
            depsDir.listFiles().each() { childFile ->
                if (childFile.name != '_placeholder' && childFile.isDirectory() && childFile.name != ".gradle") {
                    project.delete(childFile)
                }
            }
        } else {
            throw new Exception('Invalid dependency path')
        }
    }
}

clean.dependsOn cleanDeps

subprojects.each { subproject -> evaluationDependsOn(subproject.path) }

if (file('deps/_placeholder').exists()) {
    // Perform restart for new dependency handling
    def depsLevel
    if (project.gradle.startParameter.projectProperties.containsKey('moduleDep')) {
        depsLevel = project.gradle.startParameter.projectProperties['moduleDep'] + 1
    } else {
        depsLevel = 1
    }
    def artefactBuild = project.tasks.create([name: "depsRebuild_${depsLevel}", type: GradleBuild])
    artefactBuild.buildFile = project.file('build.gradle')
    artefactBuild.tasks = project.gradle.startParameter.taskNames

    def artefactProjectProperties = artefactBuild.startParameter.projectProperties
    def currentProjectProperties = project.gradle.startParameter.projectProperties
    artefactProjectProperties << currentProjectProperties
    artefactProjectProperties << ['moduleDep': depsLevel]

    // Terminate currently invalid tasks
    // TODO: Fix support for other tasks like distZip
    subprojects.each { subproject ->
        if (subproject.tasks.findByPath('assemble') != null) {
            subproject.tasks['assemble'].setDependsOn([])
        }
    }
    if (project.tasks.findByPath('assemble') != null) {
        project.tasks['assemble'].setDependsOn([])
    }

    artefactBuild.execute()
}

if (!project.gradle.startParameter.projectProperties.containsKey("moduleDep")) {
    distributions {
        main {
            contents {
                duplicatesStrategy = 'exclude'

                from project.rootDir
                include 'lgpl-3.0.txt', 'gpl-3.0.txt'
                from 'src/dist'
                include 'readme.txt'

                into('lib') {
                    from 'lib'
                }

                into('doc') {
                    from 'doc'
                    include '**'
                }
                into('resources') {
                    from 'resources'
                    include '**'
                    exclude 'private'
                }
            }
        }
    }
}
