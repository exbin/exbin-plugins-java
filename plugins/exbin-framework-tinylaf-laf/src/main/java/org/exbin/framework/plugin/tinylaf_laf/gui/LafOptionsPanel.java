/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.plugin.tinylaf_laf.gui;

import java.io.File;
import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileFilter;
import net.sf.tinylaf.Theme;
import net.sf.tinylaf.ThemeDescription;
import net.sf.tinylaf.controlpanel.ControlPanel;
import org.exbin.framework.App;
import org.exbin.framework.language.api.LanguageModuleApi;
import org.exbin.framework.options.api.OptionsComponent;
import org.exbin.framework.options.api.OptionsModifiedListener;
import org.exbin.framework.plugin.tinylaf_laf.options.impl.LafOptionsImpl;

/**
 * Laf options panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class LafOptionsPanel extends javax.swing.JPanel implements OptionsComponent<LafOptionsImpl> {

    private final java.util.ResourceBundle resourceBundle = App.getModule(LanguageModuleApi.class).getBundle(LafOptionsPanel.class);

    private OptionsModifiedListener optionsModifiedListener;

    public LafOptionsPanel() {
        initComponents();
        init();
    }

    private void init() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        themeComboBox.setModel(model);
        model.addElement(resourceBundle.getString("defaultTheme.name"));
        ThemeDescription[] themes = Theme.getAvailableThemes();
        for (ThemeDescription theme : themes) {
            model.addElement(theme.getName());
        }
    }

    @Nonnull
    @Override
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        themeButtonGroup = new javax.swing.ButtonGroup();
        themeLabel = new javax.swing.JLabel();
        includedRadioButton = new javax.swing.JRadioButton();
        themeComboBox = new javax.swing.JComboBox<>();
        customThemeRadioButton = new javax.swing.JRadioButton();
        customThemeFileTextField = new javax.swing.JTextField();
        selectFileButton = new javax.swing.JButton();
        framesDecorationCheckBox = new javax.swing.JCheckBox();
        dialogsDecorationCheckBox = new javax.swing.JCheckBox();
        noEraseOnResizeCheckBox = new javax.swing.JCheckBox();
        dynamicLayoutCheckBox = new javax.swing.JCheckBox();
        controlPanelButton = new javax.swing.JButton();

        themeLabel.setText(resourceBundle.getString("themeLabel.text")); // NOI18N

        themeButtonGroup.add(includedRadioButton);
        includedRadioButton.setSelected(true);
        includedRadioButton.setText(resourceBundle.getString("includedRadioButton.text")); // NOI18N
        includedRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                customThemeRadioButtonItemStateChanged(evt);
            }
        });

        themeButtonGroup.add(customThemeRadioButton);
        customThemeRadioButton.setText(resourceBundle.getString("customThemeRadioButton.text")); // NOI18N
        customThemeRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                customThemeRadioButtonItemStateChanged(evt);
            }
        });

        customThemeFileTextField.setEnabled(false);

        selectFileButton.setText(resourceBundle.getString("selectFileButton.text")); // NOI18N
        selectFileButton.setEnabled(false);
        selectFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileButtonActionPerformed(evt);
            }
        });

        framesDecorationCheckBox.setText(resourceBundle.getString("framesDecorationCheckBox.text")); // NOI18N

        dialogsDecorationCheckBox.setText(resourceBundle.getString("dialogsDecorationCheckBox.text")); // NOI18N

        noEraseOnResizeCheckBox.setSelected(true);
        noEraseOnResizeCheckBox.setText(resourceBundle.getString("noEraseOnResizeCheckBox.text")); // NOI18N

        dynamicLayoutCheckBox.setSelected(true);
        dynamicLayoutCheckBox.setText(resourceBundle.getString("dynamicLayoutCheckBox.text")); // NOI18N

        controlPanelButton.setText(resourceBundle.getString("controlPanelButton.text")); // NOI18N
        controlPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlPanelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(customThemeFileTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectFileButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(framesDecorationCheckBox)
                                    .addComponent(dialogsDecorationCheckBox)
                                    .addComponent(controlPanelButton)
                                    .addComponent(themeLabel)
                                    .addComponent(noEraseOnResizeCheckBox)
                                    .addComponent(dynamicLayoutCheckBox)
                                    .addComponent(includedRadioButton)
                                    .addComponent(customThemeRadioButton))
                                .addGap(0, 189, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(themeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(themeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(includedRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(themeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(customThemeRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customThemeFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFileButton))
                .addGap(18, 18, 18)
                .addComponent(framesDecorationCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dialogsDecorationCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noEraseOnResizeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dynamicLayoutCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(controlPanelButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void controlPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlPanelButtonActionPerformed
        // TODO it takes collides with dialogs control
        ControlPanel controlPanel = new ControlPanel();
        controlPanel.theFrame.setAlwaysOnTop(false);
        controlPanel.theFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_controlPanelButtonActionPerformed

    private void customThemeRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_customThemeRadioButtonItemStateChanged
        boolean customTheme = customThemeRadioButton.isSelected();
        customThemeFileTextField.setEnabled(customTheme);
        selectFileButton.setEnabled(customTheme);
        themeComboBox.setEnabled(!customTheme);
    }//GEN-LAST:event_customThemeRadioButtonItemStateChanged

    private void selectFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(true);
        fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return true;
            }

            @Override
            public String getDescription() {
                return resourceBundle.getString("themesFileFilter.description");
            }
        });
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            customThemeFileTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_selectFileButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton controlPanelButton;
    private javax.swing.JTextField customThemeFileTextField;
    private javax.swing.JRadioButton customThemeRadioButton;
    private javax.swing.JCheckBox dialogsDecorationCheckBox;
    private javax.swing.JCheckBox dynamicLayoutCheckBox;
    private javax.swing.JCheckBox framesDecorationCheckBox;
    private javax.swing.JRadioButton includedRadioButton;
    private javax.swing.JCheckBox noEraseOnResizeCheckBox;
    private javax.swing.JButton selectFileButton;
    private javax.swing.ButtonGroup themeButtonGroup;
    private javax.swing.JComboBox<String> themeComboBox;
    private javax.swing.JLabel themeLabel;
    // End of variables declaration//GEN-END:variables

    private void notifyModified() {
        if (optionsModifiedListener != null) {
            optionsModifiedListener.wasModified();
        }
    }

    @Override
    public void loadFromOptions(LafOptionsImpl options) {
        boolean useBuildInTheme = options.isUseBuildInTheme();
        if (useBuildInTheme) {
            includedRadioButton.setSelected(true);
        } else {
            customThemeRadioButton.setSelected(true);
        }
        String buildInTheme = options.getBuildInTheme();
        if (!buildInTheme.isEmpty()) {
            for (int i = 0; i < themeComboBox.getItemCount(); i++) {
                String item = themeComboBox.getItemAt(i);
                if (buildInTheme.equals(item)) {
                    themeComboBox.setSelectedIndex(i);
                    break;
                }
            }
        }
        customThemeFileTextField.setText(options.getCustomFileTheme());
        framesDecorationCheckBox.setSelected(options.isFramesDecoration());
        dialogsDecorationCheckBox.setSelected(options.isDialogsDecoration());
        noEraseOnResizeCheckBox.setSelected(options.isNoEraseOnResize());
        dynamicLayoutCheckBox.setSelected(options.isDynamicLayout());
    }

    @Override
    public void saveToOptions(LafOptionsImpl options) {
        options.setUseBuildInTheme(includedRadioButton.isSelected());
        options.setBuildInTheme(themeComboBox.getSelectedIndex() == 0 ? "" : (String) themeComboBox.getSelectedItem());
        options.setCustomThemeFile(customThemeFileTextField.getText());
        options.setFramesDecoration(framesDecorationCheckBox.isSelected());
        options.setDialogsDecoration(dialogsDecorationCheckBox.isSelected());
        options.setNoEraseOnResize(noEraseOnResizeCheckBox.isSelected());
        options.setDynamicLayout(dynamicLayoutCheckBox.isSelected());
    }

    @Override
    public void setOptionsModifiedListener(OptionsModifiedListener optionsModifiedListener) {
        this.optionsModifiedListener = optionsModifiedListener;
    }
}
