// Shared modules build

version = '0.2.1-SNAPSHOT'
def repositoryName = "exbin-framework-java"
def libraryUrl = 'http://framework.exbin.org'

ext.depsExbinAuxiliaryJava = [
    githubProfile: 'exbin',
    githubRepo: 'exbin-auxiliary-java',
    version: '0.2.0-SNAPSHOT'
]

ext.depsXbupJava = [
    githubProfile: 'exbin',
    githubRepo: 'xbup-java',
    version: '0.2.1-SNAPSHOT'
]

ext.depsXbupDataJava = [
    githubProfile: 'exbin',
    githubRepo: 'xbup-data-java',
    version: '0.2.1-SNAPSHOT'
]

ext.depsBinedLibJava = [
    githubProfile: 'exbin',
    githubRepo: 'bined-lib-java',
    version: '0.2.0-SNAPSHOT'
]

ext.depsThis = 'ExbinFrameworkJava'

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath("at.bxm.gradleplugins:gradle-svntools-plugin:latest.integration")
    }
}

['java-library', 'maven-publish', 'at.bxm.svntools', 'signing'].each {
    apply plugin: it
}
import org.gradle.util.VersionNumber

sourceCompatibility = '1.8'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    doFirst {
        options.fork = true
        if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
            if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
                options.bootstrapClasspath = files("${System.properties['java.home']}/lib/rt.jar", "$File.pathSeparator${System.properties['java.home']}/jre/lib/jsse.jar")
            } else {
                options.bootClasspath = "${System.properties['java.home']}/lib/rt.jar"
                options.bootClasspath += "$File.pathSeparator${System.properties['java.home']}/jre/lib/jsse.jar"
            }
        }
    }
}

// Disable tests on build
if (!gradle.startParameter.taskNames.any {it.endsWith("test")}) {
    tasks.withType(Test) {enabled = false}
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier "tests"
    archiveBaseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

configurations {
    tests
}

artifacts {
    tests testJar
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.java
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def createSvnDownloadTask(def moduleName, def svnUrlValue, def targetDirValue) {
    return tasks.create("svnDownload${moduleName}", at.bxm.gradleplugins.svntools.tasks.SvnExport) {
        svnUrl = svnUrlValue
        targetDir = targetDirValue
    }
}

// Module dependency processing
// - local maven repository module will be used if available
// - otherwise module will be download to deps folder
project.dependencies.ext.moduleDep = { depsName, packageName, moduleName ->
    if (depsName == ext.depsThis) {
        return project(":modules:" + moduleName)
    }

    def mavenModuleDir = repositories.mavenLocal().url.path + packageName.replace('.', '/') + '/' + moduleName + '/' + ext['deps' + depsName].version
    if (new File(mavenModuleDir).isDirectory()) {
        // Use maven package if available
        return packageName + ':' + moduleName + ':' + ext['deps' + depsName].version
    }

    def depsDir = rootProject.buildDir.parent + '/deps/'
    if (gradle.startParameter.taskNames == ['clean']) {
        return project(':deps')
    }

    def depModuleDir = depsDir + moduleName
    if (!new File(depModuleDir).isDirectory()) {
        // Download module
        def githubModulePath = 'https://github.com/' + ext['deps' + depsName].githubProfile + '/' + ext['deps' + depsName].githubRepo + '/trunk/modules/' + moduleName
        println 'Downloading ' + githubModulePath

        createSvnDownloadTask(moduleName, githubModulePath, depModuleDir)
        tasks["svnDownload${moduleName}"].execute()
        
        // Report as placeholder dependency
        if (!new File(depsDir + "_placeholder").exists()) {
            new File(depsDir + "_placeholder").mkdir()
        }
        return project(':deps')
    }

    if (new File(depsDir + "_placeholder").exists()) {
        return project(':deps')
    }

    return project(':deps:' + moduleName)
}

project.dependencies.ext.moduleDepPath = { depsName, moduleName ->
    if (depsName == ext.depsThis) {
        return ":modules:${moduleName}"
    }

    return ":deps:${moduleName}"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            //            artifact sourceJar {
            //                classifier 'sources'
            //            }
            //            artifact (javadocJar) {
            //                classifier = 'javadoc'
            //            }

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name libraryName
                    description libraryDescription
                    url libraryUrl
                    scm {
                        url "https://github.com/exbin/${repositoryName}"
                        connection "cm:git:git://github.com/exbin/${repositoryName}.git"
                        developerConnection "scm:git:git@github.com:exbin/${repositoryName}.git"
                    }
                    licenses {
                        license {
                            name 'Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'HajdaM'
                            name 'Miroslav Hajda'
                            email 'hajdam@users.sf.net'
                        }
                    }
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

